// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0--rc2
// source: proto/video.proto

package videoService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PublishActionService_PublishAction_FullMethodName = "/videoService.PublishActionService/PublishAction"
)

// PublishActionServiceClient is the client API for PublishActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishActionServiceClient interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	PublishAction(ctx context.Context, in *DouYinPublishActionRequest, opts ...grpc.CallOption) (*DouYinPublishActionResponse, error)
}

type publishActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishActionServiceClient(cc grpc.ClientConnInterface) PublishActionServiceClient {
	return &publishActionServiceClient{cc}
}

func (c *publishActionServiceClient) PublishAction(ctx context.Context, in *DouYinPublishActionRequest, opts ...grpc.CallOption) (*DouYinPublishActionResponse, error) {
	out := new(DouYinPublishActionResponse)
	err := c.cc.Invoke(ctx, PublishActionService_PublishAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishActionServiceServer is the server API for PublishActionService service.
// All implementations must embed UnimplementedPublishActionServiceServer
// for forward compatibility
type PublishActionServiceServer interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	PublishAction(context.Context, *DouYinPublishActionRequest) (*DouYinPublishActionResponse, error)
	mustEmbedUnimplementedPublishActionServiceServer()
}

// UnimplementedPublishActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublishActionServiceServer struct {
}

func (UnimplementedPublishActionServiceServer) PublishAction(context.Context, *DouYinPublishActionRequest) (*DouYinPublishActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAction not implemented")
}
func (UnimplementedPublishActionServiceServer) mustEmbedUnimplementedPublishActionServiceServer() {}

// UnsafePublishActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishActionServiceServer will
// result in compilation errors.
type UnsafePublishActionServiceServer interface {
	mustEmbedUnimplementedPublishActionServiceServer()
}

func RegisterPublishActionServiceServer(s grpc.ServiceRegistrar, srv PublishActionServiceServer) {
	s.RegisterService(&PublishActionService_ServiceDesc, srv)
}

func _PublishActionService_PublishAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinPublishActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishActionServiceServer).PublishAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublishActionService_PublishAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishActionServiceServer).PublishAction(ctx, req.(*DouYinPublishActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublishActionService_ServiceDesc is the grpc.ServiceDesc for PublishActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoService.PublishActionService",
	HandlerType: (*PublishActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishAction",
			Handler:    _PublishActionService_PublishAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/video.proto",
}

const (
	PublishListService_PublishList_FullMethodName = "/videoService.PublishListService/PublishList"
)

// PublishListServiceClient is the client API for PublishListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishListServiceClient interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	PublishList(ctx context.Context, in *DouYinPublishListRequest, opts ...grpc.CallOption) (*DouYinPublishListResponse, error)
}

type publishListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishListServiceClient(cc grpc.ClientConnInterface) PublishListServiceClient {
	return &publishListServiceClient{cc}
}

func (c *publishListServiceClient) PublishList(ctx context.Context, in *DouYinPublishListRequest, opts ...grpc.CallOption) (*DouYinPublishListResponse, error) {
	out := new(DouYinPublishListResponse)
	err := c.cc.Invoke(ctx, PublishListService_PublishList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishListServiceServer is the server API for PublishListService service.
// All implementations must embed UnimplementedPublishListServiceServer
// for forward compatibility
type PublishListServiceServer interface {
	// rpc 服务的函数名 （传入参数）返回（返回参数）
	PublishList(context.Context, *DouYinPublishListRequest) (*DouYinPublishListResponse, error)
	mustEmbedUnimplementedPublishListServiceServer()
}

// UnimplementedPublishListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublishListServiceServer struct {
}

func (UnimplementedPublishListServiceServer) PublishList(context.Context, *DouYinPublishListRequest) (*DouYinPublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishList not implemented")
}
func (UnimplementedPublishListServiceServer) mustEmbedUnimplementedPublishListServiceServer() {}

// UnsafePublishListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishListServiceServer will
// result in compilation errors.
type UnsafePublishListServiceServer interface {
	mustEmbedUnimplementedPublishListServiceServer()
}

func RegisterPublishListServiceServer(s grpc.ServiceRegistrar, srv PublishListServiceServer) {
	s.RegisterService(&PublishListService_ServiceDesc, srv)
}

func _PublishListService_PublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinPublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishListServiceServer).PublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublishListService_PublishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishListServiceServer).PublishList(ctx, req.(*DouYinPublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublishListService_ServiceDesc is the grpc.ServiceDesc for PublishListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoService.PublishListService",
	HandlerType: (*PublishListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishList",
			Handler:    _PublishListService_PublishList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/video.proto",
}
