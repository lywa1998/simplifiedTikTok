// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/message.proto

package messageservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageChatServiceClient is the client API for MessageChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageChatServiceClient interface {
	// rpc 服务的函数名（传入参数）返回（返回参数）
	MessageChat(ctx context.Context, in *DouYinMessageChatRequest, opts ...grpc.CallOption) (*DouYinMessageChatResponse, error)
}

type messageChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageChatServiceClient(cc grpc.ClientConnInterface) MessageChatServiceClient {
	return &messageChatServiceClient{cc}
}

func (c *messageChatServiceClient) MessageChat(ctx context.Context, in *DouYinMessageChatRequest, opts ...grpc.CallOption) (*DouYinMessageChatResponse, error) {
	out := new(DouYinMessageChatResponse)
	err := c.cc.Invoke(ctx, "/messageservice.MessageChatService/MessageChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageChatServiceServer is the server API for MessageChatService service.
// All implementations must embed UnimplementedMessageChatServiceServer
// for forward compatibility
type MessageChatServiceServer interface {
	// rpc 服务的函数名（传入参数）返回（返回参数）
	MessageChat(context.Context, *DouYinMessageChatRequest) (*DouYinMessageChatResponse, error)
	mustEmbedUnimplementedMessageChatServiceServer()
}

// UnimplementedMessageChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageChatServiceServer struct {
}

func (UnimplementedMessageChatServiceServer) MessageChat(context.Context, *DouYinMessageChatRequest) (*DouYinMessageChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageChat not implemented")
}
func (UnimplementedMessageChatServiceServer) mustEmbedUnimplementedMessageChatServiceServer() {}

// UnsafeMessageChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageChatServiceServer will
// result in compilation errors.
type UnsafeMessageChatServiceServer interface {
	mustEmbedUnimplementedMessageChatServiceServer()
}

func RegisterMessageChatServiceServer(s grpc.ServiceRegistrar, srv MessageChatServiceServer) {
	s.RegisterService(&MessageChatService_ServiceDesc, srv)
}

func _MessageChatService_MessageChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinMessageChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageChatServiceServer).MessageChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageservice.MessageChatService/MessageChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageChatServiceServer).MessageChat(ctx, req.(*DouYinMessageChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageChatService_ServiceDesc is the grpc.ServiceDesc for MessageChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messageservice.MessageChatService",
	HandlerType: (*MessageChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageChat",
			Handler:    _MessageChatService_MessageChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message.proto",
}

// MessageActionServiceClient is the client API for MessageActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageActionServiceClient interface {
	// rpc 服务的函数名（传入参数）返回（返回参数）
	MessageAction(ctx context.Context, in *DouYinMessageActionRequest, opts ...grpc.CallOption) (*DouYinMessageActionResponse, error)
}

type messageActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageActionServiceClient(cc grpc.ClientConnInterface) MessageActionServiceClient {
	return &messageActionServiceClient{cc}
}

func (c *messageActionServiceClient) MessageAction(ctx context.Context, in *DouYinMessageActionRequest, opts ...grpc.CallOption) (*DouYinMessageActionResponse, error) {
	out := new(DouYinMessageActionResponse)
	err := c.cc.Invoke(ctx, "/messageservice.MessageActionService/MessageAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageActionServiceServer is the server API for MessageActionService service.
// All implementations must embed UnimplementedMessageActionServiceServer
// for forward compatibility
type MessageActionServiceServer interface {
	// rpc 服务的函数名（传入参数）返回（返回参数）
	MessageAction(context.Context, *DouYinMessageActionRequest) (*DouYinMessageActionResponse, error)
	mustEmbedUnimplementedMessageActionServiceServer()
}

// UnimplementedMessageActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageActionServiceServer struct {
}

func (UnimplementedMessageActionServiceServer) MessageAction(context.Context, *DouYinMessageActionRequest) (*DouYinMessageActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAction not implemented")
}
func (UnimplementedMessageActionServiceServer) mustEmbedUnimplementedMessageActionServiceServer() {}

// UnsafeMessageActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageActionServiceServer will
// result in compilation errors.
type UnsafeMessageActionServiceServer interface {
	mustEmbedUnimplementedMessageActionServiceServer()
}

func RegisterMessageActionServiceServer(s grpc.ServiceRegistrar, srv MessageActionServiceServer) {
	s.RegisterService(&MessageActionService_ServiceDesc, srv)
}

func _MessageActionService_MessageAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinMessageActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageActionServiceServer).MessageAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageservice.MessageActionService/MessageAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageActionServiceServer).MessageAction(ctx, req.(*DouYinMessageActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageActionService_ServiceDesc is the grpc.ServiceDesc for MessageActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messageservice.MessageActionService",
	HandlerType: (*MessageActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageAction",
			Handler:    _MessageActionService_MessageAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message.proto",
}
