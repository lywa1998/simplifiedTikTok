// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: relation.proto

package relationservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelationActionServiceClient is the client API for RelationActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationActionServiceClient interface {
	RelationAction(ctx context.Context, in *DouYinRelationActionRequest, opts ...grpc.CallOption) (*DouYinRelationActionResponse, error)
}

type relationActionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationActionServiceClient(cc grpc.ClientConnInterface) RelationActionServiceClient {
	return &relationActionServiceClient{cc}
}

func (c *relationActionServiceClient) RelationAction(ctx context.Context, in *DouYinRelationActionRequest, opts ...grpc.CallOption) (*DouYinRelationActionResponse, error) {
	out := new(DouYinRelationActionResponse)
	err := c.cc.Invoke(ctx, "/relationservice.RelationActionService/RelationAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationActionServiceServer is the server API for RelationActionService service.
// All implementations must embed UnimplementedRelationActionServiceServer
// for forward compatibility
type RelationActionServiceServer interface {
	RelationAction(context.Context, *DouYinRelationActionRequest) (*DouYinRelationActionResponse, error)
	mustEmbedUnimplementedRelationActionServiceServer()
}

// UnimplementedRelationActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationActionServiceServer struct {
}

func (UnimplementedRelationActionServiceServer) RelationAction(context.Context, *DouYinRelationActionRequest) (*DouYinRelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAction not implemented")
}
func (UnimplementedRelationActionServiceServer) mustEmbedUnimplementedRelationActionServiceServer() {}

// UnsafeRelationActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationActionServiceServer will
// result in compilation errors.
type UnsafeRelationActionServiceServer interface {
	mustEmbedUnimplementedRelationActionServiceServer()
}

func RegisterRelationActionServiceServer(s grpc.ServiceRegistrar, srv RelationActionServiceServer) {
	s.RegisterService(&RelationActionService_ServiceDesc, srv)
}

func _RelationActionService_RelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinRelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationActionServiceServer).RelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationservice.RelationActionService/RelationAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationActionServiceServer).RelationAction(ctx, req.(*DouYinRelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationActionService_ServiceDesc is the grpc.ServiceDesc for RelationActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relationservice.RelationActionService",
	HandlerType: (*RelationActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationAction",
			Handler:    _RelationActionService_RelationAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}

// RelationFollowListServiceClient is the client API for RelationFollowListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationFollowListServiceClient interface {
	RelationFollowList(ctx context.Context, in *DouYinRelationFollowListRequest, opts ...grpc.CallOption) (*DouYinRelationFollowListResponse, error)
}

type relationFollowListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationFollowListServiceClient(cc grpc.ClientConnInterface) RelationFollowListServiceClient {
	return &relationFollowListServiceClient{cc}
}

func (c *relationFollowListServiceClient) RelationFollowList(ctx context.Context, in *DouYinRelationFollowListRequest, opts ...grpc.CallOption) (*DouYinRelationFollowListResponse, error) {
	out := new(DouYinRelationFollowListResponse)
	err := c.cc.Invoke(ctx, "/relationservice.RelationFollowListService/RelationFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationFollowListServiceServer is the server API for RelationFollowListService service.
// All implementations must embed UnimplementedRelationFollowListServiceServer
// for forward compatibility
type RelationFollowListServiceServer interface {
	RelationFollowList(context.Context, *DouYinRelationFollowListRequest) (*DouYinRelationFollowListResponse, error)
	mustEmbedUnimplementedRelationFollowListServiceServer()
}

// UnimplementedRelationFollowListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationFollowListServiceServer struct {
}

func (UnimplementedRelationFollowListServiceServer) RelationFollowList(context.Context, *DouYinRelationFollowListRequest) (*DouYinRelationFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFollowList not implemented")
}
func (UnimplementedRelationFollowListServiceServer) mustEmbedUnimplementedRelationFollowListServiceServer() {
}

// UnsafeRelationFollowListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationFollowListServiceServer will
// result in compilation errors.
type UnsafeRelationFollowListServiceServer interface {
	mustEmbedUnimplementedRelationFollowListServiceServer()
}

func RegisterRelationFollowListServiceServer(s grpc.ServiceRegistrar, srv RelationFollowListServiceServer) {
	s.RegisterService(&RelationFollowListService_ServiceDesc, srv)
}

func _RelationFollowListService_RelationFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinRelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationFollowListServiceServer).RelationFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationservice.RelationFollowListService/RelationFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationFollowListServiceServer).RelationFollowList(ctx, req.(*DouYinRelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationFollowListService_ServiceDesc is the grpc.ServiceDesc for RelationFollowListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationFollowListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relationservice.RelationFollowListService",
	HandlerType: (*RelationFollowListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationFollowList",
			Handler:    _RelationFollowListService_RelationFollowList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}

// RelationFollowerListClient is the client API for RelationFollowerList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationFollowerListClient interface {
	RelationFollowerList(ctx context.Context, in *DouYinRelationFollowListRequest, opts ...grpc.CallOption) (*DouYinRelationFollowListResponse, error)
}

type relationFollowerListClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationFollowerListClient(cc grpc.ClientConnInterface) RelationFollowerListClient {
	return &relationFollowerListClient{cc}
}

func (c *relationFollowerListClient) RelationFollowerList(ctx context.Context, in *DouYinRelationFollowListRequest, opts ...grpc.CallOption) (*DouYinRelationFollowListResponse, error) {
	out := new(DouYinRelationFollowListResponse)
	err := c.cc.Invoke(ctx, "/relationservice.RelationFollowerList/RelationFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationFollowerListServer is the server API for RelationFollowerList service.
// All implementations must embed UnimplementedRelationFollowerListServer
// for forward compatibility
type RelationFollowerListServer interface {
	RelationFollowerList(context.Context, *DouYinRelationFollowListRequest) (*DouYinRelationFollowListResponse, error)
	mustEmbedUnimplementedRelationFollowerListServer()
}

// UnimplementedRelationFollowerListServer must be embedded to have forward compatible implementations.
type UnimplementedRelationFollowerListServer struct {
}

func (UnimplementedRelationFollowerListServer) RelationFollowerList(context.Context, *DouYinRelationFollowListRequest) (*DouYinRelationFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFollowerList not implemented")
}
func (UnimplementedRelationFollowerListServer) mustEmbedUnimplementedRelationFollowerListServer() {}

// UnsafeRelationFollowerListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationFollowerListServer will
// result in compilation errors.
type UnsafeRelationFollowerListServer interface {
	mustEmbedUnimplementedRelationFollowerListServer()
}

func RegisterRelationFollowerListServer(s grpc.ServiceRegistrar, srv RelationFollowerListServer) {
	s.RegisterService(&RelationFollowerList_ServiceDesc, srv)
}

func _RelationFollowerList_RelationFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinRelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationFollowerListServer).RelationFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationservice.RelationFollowerList/RelationFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationFollowerListServer).RelationFollowerList(ctx, req.(*DouYinRelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationFollowerList_ServiceDesc is the grpc.ServiceDesc for RelationFollowerList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationFollowerList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relationservice.RelationFollowerList",
	HandlerType: (*RelationFollowerListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationFollowerList",
			Handler:    _RelationFollowerList_RelationFollowerList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}

// RelationFriendListServiceClient is the client API for RelationFriendListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationFriendListServiceClient interface {
	RelationFriendList(ctx context.Context, in *DouYinRelationFriendListRequest, opts ...grpc.CallOption) (*DouYinRelationFriendListResponse, error)
}

type relationFriendListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationFriendListServiceClient(cc grpc.ClientConnInterface) RelationFriendListServiceClient {
	return &relationFriendListServiceClient{cc}
}

func (c *relationFriendListServiceClient) RelationFriendList(ctx context.Context, in *DouYinRelationFriendListRequest, opts ...grpc.CallOption) (*DouYinRelationFriendListResponse, error) {
	out := new(DouYinRelationFriendListResponse)
	err := c.cc.Invoke(ctx, "/relationservice.RelationFriendListService/RelationFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationFriendListServiceServer is the server API for RelationFriendListService service.
// All implementations must embed UnimplementedRelationFriendListServiceServer
// for forward compatibility
type RelationFriendListServiceServer interface {
	RelationFriendList(context.Context, *DouYinRelationFriendListRequest) (*DouYinRelationFriendListResponse, error)
	mustEmbedUnimplementedRelationFriendListServiceServer()
}

// UnimplementedRelationFriendListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationFriendListServiceServer struct {
}

func (UnimplementedRelationFriendListServiceServer) RelationFriendList(context.Context, *DouYinRelationFriendListRequest) (*DouYinRelationFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFriendList not implemented")
}
func (UnimplementedRelationFriendListServiceServer) mustEmbedUnimplementedRelationFriendListServiceServer() {
}

// UnsafeRelationFriendListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationFriendListServiceServer will
// result in compilation errors.
type UnsafeRelationFriendListServiceServer interface {
	mustEmbedUnimplementedRelationFriendListServiceServer()
}

func RegisterRelationFriendListServiceServer(s grpc.ServiceRegistrar, srv RelationFriendListServiceServer) {
	s.RegisterService(&RelationFriendListService_ServiceDesc, srv)
}

func _RelationFriendListService_RelationFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinRelationFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationFriendListServiceServer).RelationFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationservice.RelationFriendListService/RelationFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationFriendListServiceServer).RelationFriendList(ctx, req.(*DouYinRelationFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationFriendListService_ServiceDesc is the grpc.ServiceDesc for RelationFriendListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationFriendListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relationservice.RelationFriendListService",
	HandlerType: (*RelationFriendListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationFriendList",
			Handler:    _RelationFriendListService_RelationFriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
